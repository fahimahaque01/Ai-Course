Beam Search рж╣рж▓рзЛ ржПржХржзрж░ржирзЗрж░ heuristic search algorithmред
ржПржЯрж╛ ржПржХржЯрзБ ржмрзБржжрзНржзрж┐ржорж╛ржи BFS ржПрж░ ржорждрзЛ, ржХрж┐ржирзНрждрзБ рж╕ржмржЧрзБрж▓рзЛ node expand ржирж╛ ржХрж░рзЗ рж╢рзБржзрзБржорж╛рждрзНрж░ best k ржЯрж╛ node (beam width) рж░рж╛ржЦрзЗред

 ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?
рж╢рзБрж░рзБ node ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░ржмрж┐ред

ржПржХ рж▓рзЗржнрзЗрж▓ ржирж┐ржЪрзЗ ржпрждржЧрзБрж▓рзЛ child ржЖрж╕рзЗ, рждрж╛ржжрзЗрж░ ржоржзрзНржпрзЗ heuristic ржорж╛ржи ржжрзЗржЦрзЗ ржмрзЗржЫрзЗ ржирж┐ржмрзЗ рж╢рзБржзрзБ k ржЯрж╛ best nodeред

ржУржЗ k ржЯрж╛ node ржжрж┐рзЯрзЗржЗ ржкрж░рзЗрж░ рж▓рзЗржнрзЗрж▓ ржЪрж╛рж▓рж╛ржмрзЗред

target ржкрзЗрж▓рзЗ ржерзЗржорзЗ ржпрж╛ржмрзЗред

# Simple graph with heuristic values
graph = {
    'A': ['B', 'C', 'D'],
    'B': ['E', 'F'],
    'C': ['G'],
    'D': ['H'],
    'E': [],
    'F': [],
    'G': [],
    'H': []
}

# Heuristic values for each node (lower = better)
heuristics = {
    'A': 10,
    'B': 6,
    'C': 4,
    'D': 5,
    'E': 2,
    'F': 1,
    'G': 0,   # ЁЯОп Target node
    'H': 3
}

def beam_search(start, goal, beam_width):
    queue = [start]
    while queue:
        print("\nCurrent Beam:", queue)
        if goal in queue:
            print(f"тЬЕ Found goal: {goal}")
            return True
        
        # Next level candidates
        next_level = []
        for node in queue:
            next_level.extend(graph.get(node, []))

        # Sort by heuristic and take best k nodes
        next_level = sorted(next_level, key=lambda x: heuristics[x])
        queue = next_level[:beam_width]
    
    print(f"тЭМ Goal '{goal}' not found.")
    return False

# Run the beam search
beam_search('A', 'G', beam_width=2)


ржЕржмрж╢рзНржпржЗ рж╕рзБржоржи! ржирж┐ржЪрзЗ Beam Search ржПрж░ ржХрзЛржбржЯрж╛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ, рж╕рж╣ржЬ ржнрж╛рж╖рж╛рзЯ ржмрзБржЭрж┐рзЯрзЗ ржжрж┐рж▓рж╛ржоред ржПржЯрж╛ ржмрзБржЭрж▓рзЗ future-ржП NLP, speech recognition, even AI image captioning-ржП ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрж┐ред

def beam_search(start, goal, beam_width):
    queue = [start]

 Beam Search ржПржХржЯрж╛ queue ржжрж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рзЗред
ржПржЦрж╛ржирзЗ ржкрзНрж░ржержорзЗ рж╢рзБржзрзБ A ржерж╛ржХржмрзЗ queue-рждрзЗред

    while queue:
        print("\nCurrent Beam:", queue)
        if goal in queue:
            print(f"тЬЕ Found goal: {goal}")
            return True
ЁЯФБ ржпрждржХрзНрж╖ржг queue ржлрж╛ржБржХрж╛ ржирж╛ рж╣рзЯ, рждрждржХрзНрж╖ржг ржЪрж╛рж▓рж┐рзЯрзЗ ржпрж╛ржмред
тЬЕ ржпржжрж┐ goal queue-рждрзЗ ржерж╛ржХрзЗ тЖТ ржХрж╛ржЬ рж╢рзЗрж╖ тЖТ True returnред

        next_level = []
        for node in queue:
            next_level.extend(graph.get(node, []))

ЁЯУЪ ржкрзНрж░рждрзНржпрзЗржХ beam-ржПрж░ ржЬржирзНржп рждрж╛рж░ child ржЧрзБрж▓рж╛ ржмрзЗрж░ ржХрж░рж┐ред
ржпрзЗржоржи A тЖТ B, C, D

        next_level = sorted(next_level, key=lambda x: heuristics[x])
        queue = next_level[:beam_width]

ЁЯза ржПржЗ ржЕржВрж╢рзЗржЗ Beam Search-ржПрж░ ржмрзБржжрзНржзрж┐:

рж╕ржм child ржЧрзБрж▓рж╛ heuristic ржжрж┐рзЯрзЗ sort ржХрж░рж▓рж╛ржо (ржХржо ржорж╛ржи ржЖржЧрзЗ)

рждрж╛рж░ ржоржзрзНржпрзЗ ржерзЗржХрзЗ рж╢рзБржзрзБ beam_width ржЯрж╛ best node рж░рж╛ржЦрж▓рж╛ржо

ржпрзЗржоржиржГ beam_width = 2 рж╣рж▓рзЗ тЖТ G ржЖрж░ F ржпржжрж┐ ржнрж╛рж▓рзЛ рж╣рзЯ, ржУржЧрзБрж▓рзЛржЗ рж░рж╛ржЦржмрзЗред
    print(f"тЭМ Goal '{goal}' not found.")
    return False
тЭМ ржпржжрж┐ рж╢рзЗрж╖ ржкрж░рзНржпржирзНржд target ржкрж╛ржУрзЯрж╛ ржирж╛ ржпрж╛рзЯ тЖТ False return

beam_search('A', 'G', beam_width=2)
ЁЯза A тЖТ C, D (heuristics: 4, 5) тЖТ C-рждрзЗ G тЖТ тЬЕ G found!

