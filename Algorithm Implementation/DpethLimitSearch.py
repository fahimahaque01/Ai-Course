Depth-Limited Search (DLS) рж╣рж▓рзЛ ржПржХржЯрж┐ DFS (Depth-First Search) ржПрж░ рж░рзВржк, ржпрзЗржЦрж╛ржирзЗ ржЖржорж░рж╛ ржмрж▓рзЗ ржжрж┐ржЗ "ржПржЗ ржЧрж╣рзАржирждрж╛рж░ ржмрзЗрж╢рж┐ рждрзБржорж┐ ржпрзЗржУ ржирж╛!"

тЬЕ ржЙржкржпрзЛржЧрж┐рждрж╛ (When to Use DLS):
ржЖржорж░рж╛ ржпржжрж┐ ржЬрж╛ржирж┐ ржмрж╛ ржЕржирзБржорж╛ржи ржХрж░рждрзЗ ржкрж╛рж░рж┐ ржпрзЗ рж╕ржорж╛ржзрж╛ржи ржПржХржЯрж╛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЧржнрзАрж░рждрж╛рж░ ржоржзрзНржпрзЗ ржЖржЫрзЗ, рждржЦржи DLS ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ред

ржПржЯрж┐ DFS ржПрж░ ржорждрзЛржЗ ржХрж╛ржЬ ржХрж░рзЗ, ржХрж┐ржирзНрждрзБ ржирж┐рж░рзНржзрж╛рж░рж┐ржд depth limit-ржПрж░ ржмрж╛ржЗрж░рзЗ ржЖрж░ ржпрж╛рзЯ ржирж╛ред


graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['G'],
    'F': [],
    'G': []
}

def depth_limited_search(node, target, limit):
    print("Visiting:", node, "| Depth Limit:", limit)
    if node == target:
        return True
    if limit == 0:
        return False
    for child in graph.get(node, []):
        if depth_limited_search(child, target, limit - 1):
            return True
    return False

# Call the function
start = 'A'
goal = 'G'
depth_limit = 2

found = depth_limited_search(start, goal, depth_limit)

if found:
    print(f"\nтЬЕ '{goal}' found within depth {depth_limit}")
else:
    print(f"\nтЭМ '{goal}' NOT found within depth {depth_limit}")

......output..............
Visiting: A | Depth Limit: 2
Visiting: B | Depth Limit: 1
Visiting: D | Depth Limit: 0
Visiting: E | Depth Limit: 0
Visiting: C | Depth Limit: 1
Visiting: F | Depth Limit: 0

тЭМ 'G' NOT found within depth 2
..........Details.............
def depth_limited_search(node, target, limit):
    print("Visiting:", node, "| Depth Limit:", limit)
ржкрзНрж░рждрж┐ржмрж╛рж░ ржпржЦржи ржХрзЛржи node-ржП ржпрж╛ржУрзЯрж╛ рж╣рзЯ, рждржЦржи рж╕рзЗржЯрж╛ print ржХрж░рзЗ тАФ ржпрзЗржи ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐рж╕ ржХрзЛржи node-ржП ржврзБржХрзЗржЫрзЗ ржЖрж░ depth ржХрждред

    if node == target:
        return True
тЬЕ ржпржжрж┐ ржмрж░рзНрждржорж╛ржирзЗ ржпрзЗржЗ node-ржП ржЖржЫрж┐, ржУржЯрж╛ржЗ ржпржжрж┐ target рж╣рзЯ (ржпрзЗржоржи G), рждрж╛рж╣рж▓рзЗ True ржжрж┐рзЯрзЗ function рж╢рзЗрж╖ред

    if limit == 0:
        return False
тЪая╕П ржпржжрж┐ depth limit 0 рж╣рзЯ, ржорж╛ржирзЗ ржЖрж░ ржЧржнрзАрж░ ржпрж╛ржУрзЯрж╛рж░ ржЕржирзБржорждрж┐ ржирж╛ржЗ тЖТ рждрж╛ржЗ False ржлрзЗрж░ржд ржжрж┐рзЯрзЗ ржлрж┐рж░рзЗ ржЖрж╕рж┐ред

    for child in graph.get(node, []):
        if depth_limited_search(child, target, limit - 1):
            return True
ЁЯФБ ржмрж░рзНрждржорж╛ржи node-ржПрж░ рж╕ржм child ржирзЛржбрзЗ ржПржХ ржПржХ ржХрж░рзЗ ржврзБржХрж┐ред
ржкрзНрж░рждрж┐ржмрж╛рж░ limit - 1 ржХрж░рзЗ ржжрж┐ржЗ, ржХрж╛рж░ржг ржПржХржзрж╛ржк ржирж┐ржЪрзЗ ржпрж╛ржЪрзНржЫрж┐ред

ржпржжрж┐ ржХрзЛржиржУ ржПржХржЯрж╛ child node-ржПрж░ ржнрзЗрждрж░рзЗржЗ target ржкрзЗрзЯрзЗ ржпрж╛ржЗ, рждрж╛рж╣рж▓рзЗ True ржлрзЗрж░ржд ржжрж┐рзЯрзЗ ржЙржкрж░рзЗрж░ ржжрж┐ржХрзЗ ржЙржарзЗ ржЖрж╕рж┐ред

    return False
тЭМ ржпржжрж┐ рж╕ржм child check ржХрж░рж╛рж░ ржкрж░ржУ ржХрж┐ржЫрзБ ржирж╛ ржкрж╛ржЗ, рждрж╛рж╣рж▓рзЗ False рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж┐ред

start = 'A'
goal = 'G'
depth_limit = 2

ЁЯУНржорж╛ржирзЗ ржЖржорж░рж╛ A ржерзЗржХрзЗ рж╢рзБрж░рзБ ржХрж░рзЗ G ржЦрзБржБржЬржмрзЛ, ржХрж┐ржирзНрждрзБ рж╕рж░рзНржмрзЛржЪрзНржЪ рзи рж▓рзЗржнрзЗрж▓ ржкрж░рзНржпржирзНрждржЗ ржпрзЗрждрзЗ ржкрж╛рж░ржмрзЛред

found = depth_limited_search(start, goal, depth_limit)

if found:
    print(f"\nтЬЕ '{goal}' found within depth {depth_limit}")
else:
    print(f"\nтЭМ '{goal}' NOT found within depth {depth_limit}")
 ржпржжрж┐ found = True, рждрж╛рж╣рж▓рзЗ ржмрж▓ржмрзЗ "G ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ"
ржирж╛ рж╣рж▓рзЗ ржмрж▓ржмрзЗ "G depth limit ржПрж░ ржоржзрзНржпрзЗ ржирзЗржЗ"
