ржмрзБржЭрзЗ ржЧрзЗржЫрж┐рж╕, ржПржмрж╛рж░ ржЖржорж┐ рждрзЛржХрзЗ Alpha-Beta Pruning ржПржХржжржо ржмрж╛ржВрж▓рж╛ ржнрж╛рж╖рж╛ржпрж╝ ржмрзБржЭрж┐ржпрж╝рзЗ ржжрж┐ржЪрзНржЫрж┐ тАФ рж╕рж╣ржЬржнрж╛ржмрзЗ, ржзрж╛ржкрзЗ ржзрж╛ржкрзЗред ржпрзЗрж╣рзЗрждрзБ ржПржЯрж╛ Minimax algorithm-ржПрж░ ржПржХржЯрж╛ optimization, ржЖржЧрзЗ ржЕрж▓рзНржк ржХрж░рзЗ Minimax ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзЗ рждрж╛рж░ржкрж░ ржмрзБржЭрж╛ржЗред

def minimax(depth, isMaximizingPlayer):
    if depth == 3:
        # ржирж┐ржЪрзЗрж░ рж▓рзЗржнрзЗрж▓рзЗрж░ ржнрзНржпрж╛рж▓рзБ (ржзрж░рж┐ ржХрж┐ржЫрзБ ржЧрзЗржо рж╕рзНржЯрзЗржЯ)
        return values.pop(0)

    if isMaximizingPlayer:
        best = float('-inf')
        for _ in range(2):  # 2ржЯрж╛ ржЕржкрж╢ржи ржзрж░рж▓рж╛ржо
            val = minimax(depth + 1, False)
            best = max(best, val)
        return best
    else:
        best = float('inf')
        for _ in range(2):  # 2ржЯрж╛ ржЕржкрж╢ржи ржзрж░рж▓рж╛ржо
            val = minimax(depth + 1, True)
            best = min(best, val)
        return best

values = [3, 5, 2, 9]  # ржЧрзЗржо ржЯрзНрж░рж┐-рж░ ржирж┐ржЪрзЗрж░ рж╕рзНржХрзЛрж░
result = minimax(0, True)
print("рж╕рзЗрж░рж╛ ржлрж▓рж╛ржлрж▓:", result)


 def minimax(depth, isMaximizingPlayer):
ЁЯСЙ ржПржЯрж╛ рж╣ржЪрзНржЫрзЗ minimax ржирж╛ржорзЗ ржПржХржЯрж╛ recursive ржлрж╛ржВрж╢ржиред

depth: ржЯрзНрж░рж┐-рж░ ржХрзЛржи рж╕рзНрждрж░рзЗ ржЖржЫрж┐ (level)ред

isMaximizingPlayer: ржПржЦржи ржХрж┐ MAX ржЦрзЗрж▓ржЫрзЗ, ржирж╛ржХрж┐ MIN?

 if depth == 3:
ЁЯСЙ ржпржжрж┐ ржЖржорж░рж╛ ржЧрзЗржо ржЯрзНрж░рж┐-рж░ ржирж┐ржЪрзЗрж░ рж╕рзНрждрж░рзЗ ржкрзМржБржЫрж╛ржЗ (leaf level), рждрж╛рж╣рж▓рзЗ рж╕рзНржХрзЛрж░ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмред

тЬЕ return values.pop(0)
ЁЯСЙ ржирж┐ржЪрзЗрж░ рж▓рж┐рж╕рзНржЯ values = [3, 5, 2, 9] ржерзЗржХрзЗ ржПржХ ржПржХржЯрж╛ ржорж╛ржи ржмрзЗрж░ ржХрж░рзЗ ржжрж┐ржЪрзНржЫрзЗ (рж╕рж╛ржоржирзЗрж░ ржжрж┐ржХ ржерзЗржХрзЗ)ред

if isMaximizingPlayer:
ЁЯСЙ ржпржжрж┐ ржПржЦржи MAX player ржПрж░ ржкрж╛рж▓рж╛ рж╣рзЯ:

рж╢рзБрж░рзБрждрзЗржЗ ржзрж░рзЗ ржирж┐ржЗ, рж╕ржмржЪрзЗржпрж╝рзЗ ржЦрж╛рж░рж╛ржк рж╕рзНржХрзЛрж░ (minus infinity) best = float('-inf')
for _ in range(2):
    val = minimax(depth + 1, False)
    best = max(best, val)
 ржжрзБржЗржЯрж╛ child ржЖржЫрзЗ ржзрж░рзЗ ржирж┐ржЗред ржкрзНрж░рждрзНржпрзЗржХржЯрж╛рж░ ржЬржирзНржп minimax() ржЖржмрж╛рж░ ржбрж╛ржХрж┐ред
ЁЯСЙ ржпрзЗржЯрж╛рж░ рж╕рзНржХрзЛрж░ рж╕ржмржЪрзЗржпрж╝рзЗ ржнрж╛рж▓рзЛ, рж╕рзЗржЯрж╛ ржмрзЗржЫрзЗ ржирж┐ржЗред

ржпржжрж┐ MIN player рж╣рзЯ:
best = float('inf')
for _ in range(2):
    val = minimax(depth + 1, True)
    best = min(best, val)
ржПржХржЗржнрж╛ржмрзЗ, MIN player ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЗ рж╕ржмржЪрзЗржпрж╝рзЗ ржХржо рж╕рзНржХрзЛрж░ ржмрзЗржЫрзЗ ржирж┐рждрзЗред

 values = [3, 5, 2, 9]
ЁЯСЙ ржПржЯрж╛ ржЧрзЗржо ржЯрзНрж░рж┐-рж░ ржирж┐ржЪрзЗрж░ рж╕рзНржХрзЛрж░ред ржПржЧрзБрж▓рзЛ ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ pop() ржХрж░рзЗ ржирзЗржУрзЯрж╛ рж╣рзЯред

 result = minimax(0, True)
ЁЯСЙ ржкрзНрж░ржержоржмрж╛рж░ depth = 0, isMaximizingPlayer = True ржжрж┐рзЯрзЗ рж╢рзБрж░рзБ ржХрж░рж┐ (ржорж╛ржирзЗ ржкрзНрж░ржержорзЗ MAX player ржЦрзЗрж▓рзЗ)ред
